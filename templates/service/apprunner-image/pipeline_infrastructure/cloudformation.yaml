Resources:
  ECRRepo:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain
    {% if pipeline.inputs.environment_account_ids %}
    Properties:
      # This policy allows environment accounts to get the image from ECRRepo in the management account
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowPull
            Effect: Allow
            Principal:
              AWS:
                {% set environment_account_ids = pipeline.inputs.environment_account_ids.split(',') %}
                {% for environment_account_id in environment_account_ids %}
                - "arn:aws:iam::{{environment_account_id}}:root"
                {% endfor %}
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
    {% endif %}
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: repo_name
          Type: PLAINTEXT
          Value: !Ref ECRRepo
        - Name: service_name
          Type: PLAINTEXT
          Value: '{{service.name}}'
      ServiceRole: !GetAtt PublishRole.Arn
      Source:
        BuildSpec: !Sub |
          ---
          version: '0.2'
          env:
            exported-variables:
            - IMAGE_TAG
            - IMAGE_ID
          phases:
            install:
              runtime-versions:
                docker: 18
              commands:
              - pip3 install --upgrade --user awscli
              - echo 'f6bd1536a743ab170b35c94ed4c7c4479763356bd543af5d391122f4af852460  yq_linux_amd64' > yq_linux_amd64.sha
              - wget -q https://github.com/mikefarah/yq/releases/download/3.4.0/yq_linux_amd64
              - sha256sum -c yq_linux_amd64.sha
              - mv yq_linux_amd64 /usr/bin/yq
              - chmod +x /usr/bin/yq
              - echo '048ca227d596df3d9d0a461d35fe8d082ed4f8f73cf266e77f5d0ee37ca4c78f  hadolint-Linux-x86_64' > hadolint-Linux-x86_64.sha
              - wget -q https://github.com/hadolint/hadolint/releases/download/v2.3.0/hadolint-Linux-x86_64
              - sha256sum -c hadolint-Linux-x86_64.sha
              - mv hadolint-Linux-x86_64 /usr/bin/hadolint
              - chmod +x /usr/bin/hadolint
            pre_build:
              commands:
              - cd $CODEBUILD_SRC_DIR
              - "$(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)"
              - "{{ pipeline.inputs.unit_test_command }}"
            build:
              commands:
              - hadolint {{pipeline.inputs.app_directory}}/Dockerfile -f json > hadolint.json
              - IMAGE_REPO_NAME=$repo_name
              - IMAGE_TAG=$CODEBUILD_BUILD_NUMBER
              - IMAGE_ID=${AWS::AccountId}.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
              - LATEST_ID=${AWS::AccountId}.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest
              - docker build --cache-from $LATEST_ID -t $IMAGE_REPO_NAME:$IMAGE_TAG {{pipeline.inputs.app_directory}}
              - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $IMAGE_ID;
              - docker push $IMAGE_ID;
            post_build:
              commands:
              - aws proton --region $AWS_DEFAULT_REGION get-service --name $service_name | jq -r .service.spec > service.yaml
              - yq w service.yaml 'instances[*].spec.image' "$IMAGE_ID" > rendered_service.yaml
              - |
                if [ -f hadolint.json ]; then
                  result=$(cat hadolint.json | jq -r '.[] | {id: (.code+":"+(.line|tostring)), name: (.code+":"+(.line|tostring)), steps: [{result: {status: "failed"}, name: .code, keyword: .message}]}')

                  cat << OUTPUT > hadolint-cucumber.json
                [{
                  "id": "hadolint",
                  "description": "Hadolint Results",
                  "name": "Hadolint",
                  "elements": [$result]
                }]
                OUTPUT
                fi
          artifacts:
            files:
            - rendered_service.yaml
          reports:
            hadolintReportGroup:
              files:
                - 'hadolint-cucumber.json'
              file-format: CUCUMBERJSON 
        Type: CODEPIPELINE
      EncryptionKey: !GetAtt PipelineArtifactsBucketEncryptionKey.Arn

  ScanProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        PrivilegedMode: true
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: repo_name
          Type: PLAINTEXT
          Value: !Ref ECRRepo
        - Name: service_name
          Type: PLAINTEXT
          Value: '{{service.name}}'
      ServiceRole: !GetAtt PublishRole.Arn
      Source:
        BuildSpec: !Sub |
          ---
          version: '0.2'
          phases:
            install:
              runtime-versions:
                docker: 18
              commands:
              - pip3 install --upgrade --user awscli
            pre_build:
              commands:
              - cd $CODEBUILD_SRC_DIR
              - "$(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)"
            build:
              commands:
              - IMAGE_REPO_NAME=$repo_name
              - LATEST_ID=${AWS::AccountId}.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:latest
              - |
                aws ecr start-image-scan --repository-name $IMAGE_REPO_NAME --image-id imageTag=$IMAGE_TAG

                sleep 3
                while [[ $(aws ecr describe-image-scan-findings --repository-name $IMAGE_REPO_NAME --image-id imageTag=$IMAGE_TAG | jq -r .imageScanStatus.status) != "COMPLETE" ]];do 
                  echo "Waiting for scan to complete..."
                  sleep 3
                done

                aws ecr describe-image-scan-findings --repository-name $IMAGE_REPO_NAME --image-id imageTag=$IMAGE_TAG > scan.json
                critical=$(jq -n --slurpfile scan scan.json '$scan[0].imageScanFindings.findingSeverityCounts.CRITICAL')

                if [[ $critical -gt 0 ]]; then
                  echo "Error: Critical vulnerabilities found"
                  exit 1
                fi
              - docker pull $IMAGE_ID
              - docker tag $IMAGE_ID $LATEST_ID
              - docker push $LATEST_ID
          artifacts:
            files:
            - rendered_service.yaml
        Type: CODEPIPELINE
      EncryptionKey: !GetAtt PipelineArtifactsBucketEncryptionKey.Arn

{% for service_instance in service_instances %}
  Deploy{{loop.index}}Project:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        PrivilegedMode: false
        Type: LINUX_CONTAINER
        EnvironmentVariables:
        - Name: service_name
          Type: PLAINTEXT
          Value:  '{{service.name}}'
        - Name: service_instance_name
          Type: PLAINTEXT
          Value: '{{service_instance.name}}'
      ServiceRole:
        Fn::GetAtt:
          - DeploymentRole
          - Arn
      Source:
        BuildSpec: >-
          {
            "version": "0.2",
            "phases": {
              "build": {
                "commands": [
                  "pip3 install --upgrade --user awscli",
                  "aws proton --region $AWS_DEFAULT_REGION update-service-instance --deployment-type CURRENT_VERSION --name $service_instance_name --service-name $service_name --spec file://rendered_service.yaml",
                  "aws proton --region $AWS_DEFAULT_REGION wait service-instance-deployed --name $service_instance_name --service-name $service_name"
                ]
              }
            }
          }
        Type: CODEPIPELINE
      EncryptionKey: !GetAtt PipelineArtifactsBucketEncryptionKey.Arn
{% endfor %}
  # This role is used to build and publish an image to ECR
  PublishRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: "2012-10-17"
  PublishRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource: 
              - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${BuildProject}'
              - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${BuildProject}:*'
              - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ScanProject}'
              - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ScanProject}:*'
          - Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${BuildProject}-*'
              - !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${ScanProject}-*'
          - Action:
              - ecr:GetAuthorizationToken
            Effect: Allow
            Resource: "*"
          - Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:CompleteLayerUpload
              - ecr:GetAuthorizationToken
              - ecr:InitiateLayerUpload
              - ecr:PutImage
              - ecr:UploadLayerPart
              - ecr:StartImageScan
              - ecr:DescribeImageScanFindings
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Effect: Allow
            Resource: !Sub '${ECRRepo.Arn}*'
          - Action:
              - proton:GetService
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Effect: Allow
            Resource:
              - !GetAtt PipelineArtifactsBucket.Arn
              - !Sub '${PipelineArtifactsBucket.Arn}/*'
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Resource:
              - !GetAtt PipelineArtifactsBucketEncryptionKey.Arn
          - Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Resource:
              - !GetAtt PipelineArtifactsBucketEncryptionKey.Arn
        Version: "2012-10-17"
      PolicyName: PublishRoleDefaultPolicy
      Roles:
        - Ref: PublishRole

  DeploymentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
        Version: "2012-10-17"
  DeploymentRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/Deploy*Project*'
              - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/Deploy*Project:*'
          - Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/Deploy*Project-*'
          - Action:
              - proton:UpdateServiceInstance
              - proton:GetServiceInstance
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
            Effect: Allow
            Resource:
              - !GetAtt PipelineArtifactsBucket.Arn
              - !Sub '${PipelineArtifactsBucket.Arn}/*'
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
            Effect: Allow
            Resource:
              - !GetAtt PipelineArtifactsBucketEncryptionKey.Arn
          - Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Resource:
              - !GetAtt PipelineArtifactsBucketEncryptionKey.Arn
        Version: "2012-10-17"
      PolicyName: DeploymentRoleDefaultPolicy
      Roles:
        - Ref: DeploymentRole
  PipelineArtifactsBucketEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Statement:
          - Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
              - kms:GenerateDataKey
              - kms:TagResource
              - kms:UntagResource
            Effect: Allow
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - ":iam::"
                    - Ref: AWS::AccountId
                    - :root
            Resource: "*"
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Principal:
              AWS: !GetAtt PipelineRole.Arn
            Resource: "*"
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Principal:
              AWS: !GetAtt PublishRole.Arn
            Resource: "*"
          - Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Principal:
              AWS: !GetAtt PublishRole.Arn
            Resource: "*"
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
            Effect: Allow
            Principal:
              AWS: !GetAtt DeploymentRole.Arn
            Resource: "*"
          - Action:
              - kms:Decrypt
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Principal:
              AWS: !GetAtt DeploymentRole.Arn
            Resource: "*"
        Version: "2012-10-17"
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  PipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              KMSMasterKeyID: !GetAtt PipelineArtifactsBucketEncryptionKey.Arn
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  PipelineArtifactsBucketEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: 'alias/codepipeline-encryption-key-{{ service.name }}'
      TargetKeyId: !GetAtt PipelineArtifactsBucketEncryptionKey.Arn
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
        Version: "2012-10-17"
  PipelineRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Effect: Allow
            Resource:
              - !GetAtt PipelineArtifactsBucket.Arn
              - !Sub '${PipelineArtifactsBucket.Arn}/*'
          - Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
            Effect: Allow
            Resource:
              - !GetAtt PipelineArtifactsBucketEncryptionKey.Arn
          - Action: codestar-connections:*
            Effect: Allow
            Resource: "*"
          - Action: sts:AssumeRole
            Effect: Allow
            Resource:
              - !GetAtt PipelineBuildCodePipelineActionRole.Arn
          - Action: sts:AssumeRole
            Effect: Allow
            Resource:
              - !GetAtt PipelineDeployCodePipelineActionRole.Arn
        Version: "2012-10-17"
      PolicyName: PipelineRoleDefaultPolicy
      Roles:
        - Ref: PipelineRole
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: '{{ service.name }}-deployment'
      RoleArn: !GetAtt PipelineRole.Arn
      Stages:
        - Actions:
            - ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              Configuration:
                ConnectionArn: '{{ service.repository_connection_arn }}'
                FullRepositoryId: '{{ service.repository_id }}'
                BranchName: '{{ service.branch_name }}'
              Name: Checkout
              OutputArtifacts:
                - Name: Artifact_Source_Checkout
              RunOrder: 1
          Name: Source
        - Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName:
                  Ref: BuildProject
              InputArtifacts:
                - Name: Artifact_Source_Checkout
              Name: Build
              OutputArtifacts:
                - Name: BuildOutput
              RoleArn: !GetAtt PipelineBuildCodePipelineActionRole.Arn
              RunOrder: 1
              Namespace: BuildProject
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName:
                  Ref: ScanProject
                EnvironmentVariables: '[{"name":"IMAGE_ID","value":"#{BuildProject.IMAGE_ID}","type":"PLAINTEXT"},{"name":"IMAGE_TAG","value":"#{BuildProject.IMAGE_TAG}","type":"PLAINTEXT"}]'
              InputArtifacts:
                - Name: Artifact_Source_Checkout
              Name: Scan
              RoleArn: !GetAtt PipelineBuildCodePipelineActionRole.Arn
              RunOrder: 2
          Name: Build {%- for service_instance in service_instances %}
        {% if service_instances[loop.index0].outputs.Approval %}
        - Actions:
            - ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: "1"
              Name: Approval
              RunOrder: 1
          Name: Approve-{{service_instance.name}}
        {% endif %}
        - Actions:
            - ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              Configuration:
                ProjectName:
                  Ref: Deploy{{loop.index}}Project
              InputArtifacts:
                - Name: BuildOutput
              Name: Deploy
              RoleArn: !GetAtt PipelineDeployCodePipelineActionRole.Arn
              RunOrder: 1
          Name: 'Deploy-{{service_instance.name}}'
{%- endfor %}
      ArtifactStore:
        EncryptionKey:
          Id: !GetAtt PipelineArtifactsBucketEncryptionKey.Arn
          Type: KMS
        Location:
          Ref: PipelineArtifactsBucket
        Type: S3
    DependsOn:
      - PipelineRoleDefaultPolicy
      - PipelineRole
  PipelineBuildCodePipelineActionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
        Version: "2012-10-17"
  PipelineBuildCodePipelineActionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:StopBuild
            Effect: Allow
            Resource: 
              - !GetAtt BuildProject.Arn
              - !GetAtt ScanProject.Arn
        Version: "2012-10-17"
      PolicyName: PipelineBuildCodePipelineActionRoleDefaultPolicy
      Roles:
        - Ref: PipelineBuildCodePipelineActionRole
  PipelineDeployCodePipelineActionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
        Version: "2012-10-17"
  PipelineDeployCodePipelineActionRoleDefaultPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - codebuild:BatchGetBuilds
              - codebuild:StartBuild
              - codebuild:StopBuild
            Effect: Allow
            Resource:
              - !Sub 'arn:${AWS::Partition}:codebuild:${AWS::Region}:${AWS::AccountId}:project/Deploy*'
        Version: "2012-10-17"
      PolicyName: PipelineDeployCodePipelineActionRoleDefaultPolicy
      Roles:
        - Ref: PipelineDeployCodePipelineActionRole
Outputs:
  PipelineEndpoint:
    Description: The URL to access the pipeline
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${Pipeline}/view?region=${AWS::Region}"